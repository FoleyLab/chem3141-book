Traceback (most recent call last):
  File "/Users/jfoley19/miniforge3/envs/jbook/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/jfoley19/miniforge3/envs/jbook/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jfoley19/miniforge3/envs/jbook/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jfoley19/miniforge3/envs/jbook/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/jfoley19/miniforge3/envs/jbook/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/jfoley19/miniforge3/envs/jbook/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/jfoley19/miniforge3/envs/jbook/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
fig = plt.figure()

# lists of 2d line objects ... each frame will be an element in the list
line1, = plt.plot([], [], color = 'blue', lw=2)  # Re(1)
line2, = plt.plot([], [], color = 'red', lw=2)   # Im(1)
line3, = plt.plot([], [], color = 'black', lw=2) # |1|^2
line4, = plt.plot([], [], color = 'blue', lw=2)  # Re(2)
line5, = plt.plot([], [], color = 'red', lw=2)   # Im(2)
line6, = plt.plot([], [], color = 'black', lw=2) # |2|^2
line7, = plt.plot([], [], color = 'blue', lw=2, label = r'Re$(\Psi)$')  # Re(1+2)
line8, = plt.plot([], [], color = 'red', lw=2, label = r'Im$(\Psi)$')   # Im(1+2)
line9, = plt.plot([], [], color = 'black', lw=2, label = r'$|\Psi|^2$') # |1+2|^2

# add some labels for each state
plt.annotate(r'$\Psi_1$', xy = [0.9, -1.5])
plt.annotate(r'$\Psi_2$', xy = [0.9, 2.5])
plt.annotate(r'$(\Psi_1 + \Psi_2)/2^{1/2}$', xy = [0.8, 6.5])

# figure details
plt.xlim(0, 1)
plt.ylim(-2, 12)
plt.xticks(ticks=[0.0, 0.5, 1.0])
plt.yticks(ticks=[])
plt.legend(loc='upper left')

# mass, length of box, hbar
me = 1
l = 1
hbar = 1

# energies for states with n=1 and n=2
E_1 = hbar**2 * np.pi**2 * 1**2 / (2 * me * l**2)
E_2 = hbar**2 * np.pi**2 * 2**2 / (2 * me * l**2)

# how many time steps do we need for one oscillation of Re(psi_1)?
# number of time steps = period of oscillation / dt 
dt = 0.01
time_steps = int(2.0 * np.pi / E_1 / dt)

# x-range over which we would like to visualize the states
x = np.arange(0, 1.01, 0.01)

# spatial parts of the wave functions with n=1 and n=2
psi_1_spatial = np.sqrt(2.0) * np.sin(1 * np.pi * x / l)
psi_2_spatial = np.sqrt(2.0) * np.sin(2 * np.pi * x / l)

# animation function
def stationary_states(n):

    # current time
    time = n * dt

    # total, time-dependent wave functions
    psi_1 = psi_1_spatial * np.exp(-1j * E_1 * time / hbar)
    psi_1_prob = np.abs(psi_1)**2
    
    psi_2 = psi_2_spatial * np.exp(-1j * E_2 * time / hbar)
    psi_2_prob = np.abs(psi_2)**2
    
    psi_12 = 1.0 / np.sqrt(2.0) * (psi_1 + psi_2)
    psi_12_prob = np.abs(psi_12)**2

    # a shift for visualizing the wave functions in a stack
    shift = 4

    line1.set_data(x, psi_1.real)
    line2.set_data(x, psi_1.imag)
    line3.set_data(x, psi_1_prob)
    
    line4.set_data(x, psi_2.real + shift)
    line5.set_data(x, psi_2.imag + shift)
    line6.set_data(x, psi_2_prob + shift)
    
    line7.set_data(x, psi_12.real + 2 * shift)
    line8.set_data(x, psi_12.imag + 2 * shift)
    line9.set_data(x, psi_12_prob + 2 * shift)
    
    return (line1, line2, line3, line4, line5, line6, line7, line8, line9)

from matplotlib import animation

anim = animation.FuncAnimation(fig, stationary_states, frames=time_steps, interval=30, blit=True)

from IPython.display import HTML
HTML(anim.to_html5_video())
------------------


[31m---------------------------------------------------------------------------[39m
[31mRuntimeError[39m                              Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[4][39m[32m, line 85[39m
[32m     82[39m anim = animation.FuncAnimation(fig, stationary_states, frames=time_steps, interval=[32m30[39m, blit=[38;5;28;01mTrue[39;00m)
[32m     84[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mIPython[39;00m[34;01m.[39;00m[34;01mdisplay[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m HTML
[32m---> [39m[32m85[39m HTML([43manim[49m[43m.[49m[43mto_html5_video[49m[43m([49m[43m)[49m)

[36mFile [39m[32m~/miniforge3/envs/jbook/lib/python3.12/site-packages/matplotlib/animation.py:1302[39m, in [36mAnimation.to_html5_video[39m[34m(self, embed_limit)[39m
[32m   1299[39m path = Path(tmpdir, [33m"[39m[33mtemp.m4v[39m[33m"[39m)
[32m   1300[39m [38;5;66;03m# We create a writer manually so that we can get the[39;00m
[32m   1301[39m [38;5;66;03m# appropriate size for the tag[39;00m
[32m-> [39m[32m1302[39m Writer = [43mwriters[49m[43m[[49m[43mmpl[49m[43m.[49m[43mrcParams[49m[43m[[49m[33;43m'[39;49m[33;43manimation.writer[39;49m[33;43m'[39;49m[43m][49m[43m][49m
[32m   1303[39m writer = Writer(codec=[33m'[39m[33mh264[39m[33m'[39m,
[32m   1304[39m                 bitrate=mpl.rcParams[[33m'[39m[33manimation.bitrate[39m[33m'[39m],
[32m   1305[39m                 fps=[32m1000.[39m / [38;5;28mself[39m._interval)
[32m   1306[39m [38;5;28mself[39m.save([38;5;28mstr[39m(path), writer=writer)

[36mFile [39m[32m~/miniforge3/envs/jbook/lib/python3.12/site-packages/matplotlib/animation.py:121[39m, in [36mMovieWriterRegistry.__getitem__[39m[34m(self, name)[39m
[32m    119[39m [38;5;28;01mif[39;00m [38;5;28mself[39m.is_available(name):
[32m    120[39m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m._registered[name]
[32m--> [39m[32m121[39m [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m([33mf[39m[33m"[39m[33mRequested MovieWriter ([39m[38;5;132;01m{[39;00mname[38;5;132;01m}[39;00m[33m) not available[39m[33m"[39m)

[31mRuntimeError[39m: Requested MovieWriter (ffmpeg) not available

